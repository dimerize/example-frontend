{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\Omar Khan\\\\Downloads\\\\app-temp-template\\\\app-template-main\\\\template-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Omar Khan\\\\Downloads\\\\app-temp-template\\\\app-template-main\\\\template-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:\\\\Users\\\\Omar Khan\\\\Downloads\\\\app-temp-template\\\\app-template-main\\\\template-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Omar Khan\\\\Downloads\\\\app-temp-template\\\\app-template-main\\\\template-frontend\\\\src\\\\home-page.js\";\nimport React, { useState, useEffect } from 'react';\nimport { getQOD, getQuote } from './services/quote';\nimport dna from './assets/dna.png';\nimport './home-page.css';\n\nfunction HomePage() {\n  var _useState = useState({\n    quote: 'Science and everyday life cannot and should not be separated.',\n    author: 'Rosalind Franklin'\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      quoteData = _useState2[0],\n      setQuoteData = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      nextQuote = _useState4[0],\n      setNextQuote = _useState4[1];\n\n  var getNewQuote = function getNewQuote(isRandom) {\n    if (isRandom) {\n      // Update w/ next quote, if data wasn't returned\n      setQuoteData(nextQuote || quoteData);\n      getNextQuote();\n    } else {\n      getQOD().then(function (newQuoteData) {\n        // Add new quote, or use old quote, if data wasn't returned\n        setQuoteData(newQuoteData || quoteData);\n      });\n    }\n  };\n\n  function getNextQuote() {\n    return _getNextQuote.apply(this, arguments);\n  }\n\n  function _getNextQuote() {\n    _getNextQuote = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              getQuote().then(setNextQuote);\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _getNextQuote.apply(this, arguments);\n  }\n\n  ;\n  useEffect(function () {\n    // Get Quote of Day first\n    getNextQuote(false);\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: 'quote-container',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: function onClick() {\n      return getNewQuote(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }\n  }, \"Quote of Day\")), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: function onClick() {\n      return getNewQuote(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }\n  }, \"Random\"))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: 'em4 italics mskcc-dark-blue',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }, \"\\\"\", quoteData.quote || '', \"\\\"\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: 'width-350 float-right',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: 'em2 inline-text mskcc-dark-blue',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }\n  }, \"- \", quoteData['author'] || ''), /*#__PURE__*/React.createElement(\"img\", {\n    alt: \"dna\",\n    className: \"loading-icon inline-text\",\n    src: dna,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }\n  }))));\n}\n\nexport default HomePage;","map":{"version":3,"sources":["C:/Users/Omar Khan/Downloads/app-temp-template/app-template-main/template-frontend/src/home-page.js"],"names":["React","useState","useEffect","getQOD","getQuote","dna","HomePage","quote","author","quoteData","setQuoteData","nextQuote","setNextQuote","getNewQuote","isRandom","getNextQuote","then","newQuoteData"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SAAQC,MAAR,EAAgBC,QAAhB,QAA+B,kBAA/B;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AACA,OAAO,iBAAP;;AAEA,SAASC,QAAT,GAAoB;AAAA,kBACkBL,QAAQ,CAAC;AACvCM,IAAAA,KAAK,EAAE,+DADgC;AAEvCC,IAAAA,MAAM,EAAE;AAF+B,GAAD,CAD1B;AAAA;AAAA,MACTC,SADS;AAAA,MACEC,YADF;;AAAA,mBAKkBT,QAAQ,CAAC,EAAD,CAL1B;AAAA;AAAA,MAKTU,SALS;AAAA,MAKEC,YALF;;AAOhB,MAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,QAAD,EAAc;AAC9B,QAAGA,QAAH,EAAY;AACR;AACAJ,MAAAA,YAAY,CAACC,SAAS,IAAIF,SAAd,CAAZ;AACAM,MAAAA,YAAY;AACf,KAJD,MAIO;AACHZ,MAAAA,MAAM,GAAGa,IAAT,CAAc,UAACC,YAAD,EAAkB;AAC5B;AACAP,QAAAA,YAAY,CAACO,YAAY,IAAIR,SAAjB,CAAZ;AACH,OAHD;AAIH;AACJ,GAXD;;AAPgB,WAoBDM,YApBC;AAAA;AAAA;;AAAA;AAAA,6EAoBhB;AAAA;AAAA;AAAA;AAAA;AACIX,cAAAA,QAAQ,GAAGY,IAAX,CAAgBJ,YAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KApBgB;AAAA;AAAA;;AAsBf;AAEDV,EAAAA,SAAS,CAAC,YAAM;AACZ;AACAa,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,GAHQ,EAGN,EAHM,CAAT;AAKA,sBAAQ;AAAK,IAAA,EAAE,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACJ;AAAK,IAAA,SAAS,EAAE,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAQ,IAAA,IAAI,EAAC,QAAb;AACQ,IAAA,OAAO,EAAE;AAAA,aAAMF,WAAW,CAAC,KAAD,CAAjB;AAAA,KADjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFJ,CADJ,eAKI;AAAQ,IAAA,IAAI,EAAC,QAAb;AACQ,IAAA,OAAO,EAAE;AAAA,aAAMA,WAAW,CAAC,IAAD,CAAjB;AAAA,KADjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,CALJ,CADI,eAWJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAG,IAAA,SAAS,EAAE,6BAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA+CJ,SAAS,CAACF,KAAV,IAAmB,EAAlE,OADJ,eAEI;AAAK,IAAA,SAAS,EAAE,uBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAG,IAAA,SAAS,EAAE,iCAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAoDE,SAAS,CAAC,QAAD,CAAT,IAAuB,EAA3E,CADJ,eAEI;AAAK,IAAA,GAAG,EAAC,KAAT;AAAe,IAAA,SAAS,EAAC,0BAAzB;AAAoD,IAAA,GAAG,EAAEJ,GAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CAFJ,CAXI,CAAR;AAmBH;;AAED,eAAeC,QAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport {getQOD, getQuote} from './services/quote';\nimport dna from './assets/dna.png';\nimport './home-page.css';\n\nfunction HomePage() {\n    const [quoteData, setQuoteData] = useState({\n        quote: 'Science and everyday life cannot and should not be separated.',\n        author: 'Rosalind Franklin'\n    });\n    const [nextQuote, setNextQuote] = useState({});\n\n    const getNewQuote = (isRandom) => {\n        if(isRandom){\n            // Update w/ next quote, if data wasn't returned\n            setQuoteData(nextQuote || quoteData);\n            getNextQuote();\n        } else {\n            getQOD().then((newQuoteData) => {\n                // Add new quote, or use old quote, if data wasn't returned\n                setQuoteData(newQuoteData || quoteData)\n            });\n        }\n    };\n\n    async function getNextQuote() {\n        getQuote().then(setNextQuote);\n    };\n\n    useEffect(() => {\n        // Get Quote of Day first\n        getNextQuote(false);\n    }, []);\n\n    return (<div id>\n        <div className={'quote-container'}>\n            <button type='button'\n                    onClick={() => getNewQuote(false)}>\n                <p>Quote of Day</p>\n            </button>\n            <button type='button'\n                    onClick={() => getNewQuote(true)}>\n                <p>Random</p>\n            </button>\n        </div>\n        <div>    \n            <p className={'em4 italics mskcc-dark-blue'}>\"{quoteData.quote || ''}\"</p>\n            <div className={'width-350 float-right'}>\n                <p className={'em2 inline-text mskcc-dark-blue'}>- {quoteData['author'] || ''}</p>\n                <img alt='dna' className='loading-icon inline-text' src={dna}/>\n            </div>\n        </div>\n    </div>);\n}\n\nexport default HomePage;\n"]},"metadata":{},"sourceType":"module"}